#include "../imports/stdlib.fc";

;; storage variables
global int index;
global int version;

;; settings
global slice pool_authority;
global slice token_mint;
global slice currency_mint;
global slice token_vault;
global slice currency_vault;
global int start_time;
global int end_time;
global int public_sale_start_time;
global int min_contribution;
global int max_contribution;
global int soft_cap;
global int hard_cap;
global int rate;
global int listing_percentage;
global int refund_type;
global int native_fee_percent;
global int token_fee_percent;

;; state
global int state;
global int total_raised;
global int total_volume_purchased;
global int purchaser_count;
global int finish_time;
global int claim_time;

;; jetton
global slice jetton_minter;
global slice jetton_wallet;
global cell jetton_wallet_code;

(slice, ([slice, slice, slice, slice, slice, int, int, int, int, int, int, int, int, int, int, int, int])) ~load_pool_setting(slice s) inline {
    slice ds = s~load_ref().begin_parse();

    pool_authority = ds~load_msg_addr();

    slice jetton_s = ds~load_ref().begin_parse();
    token_mint = jetton_s~load_msg_addr();
    currency_mint = jetton_s~load_msg_addr();

    slice vault_s = ds~load_ref().begin_parse();
    token_vault = vault_s~load_msg_addr();
    currency_vault = vault_s~load_msg_addr();

    start_time = ds~load_uint(64);
    end_time = ds~load_uint(64);
    public_sale_start_time = ds~load_uint(64);
    min_contribution = ds~load_uint(64);
    max_contribution = ds~load_uint(64);
    soft_cap = ds~load_uint(64);
    hard_cap = ds~load_uint(64);
    rate = ds~load_uint(64);
    listing_percentage = ds~load_uint(8);
    refund_type = ds~load_uint(8);
    native_fee_percent = ds~load_uint(8);
    token_fee_percent = ds~load_uint(8);

    var data = [
        poo_authority, token_mint, currency_mint, token_vault, 
        currency_vault, start_time, end_time, public_sale_start_time,
        min_contribution, max_contribution, soft_cap, hard_cap, rate,
        listing_percentage, refund_type, native_fee_percent, token_fee_percent
    ];
    return (s, (data));
}

builder store_setting(builder b, [slice, slice, slice, slice, slice, int, int, int, int, int, int, int, int, int, int, int, int] config_data) inline {
    var [pool_authority, token_mint, currency_mint, token_vault, currency_vault, start_time, end_time, public_sale_start_time, min_contribution, max_contribution, soft_cap, hard_cap, rate, listing_percentage, refund_type, native_fee_percent, token_fee_percent] = config_data;
    
    cell settingBuilder = begin_cell();

    ;; save pool_authority
    settingBuilder.store_msg_addr(pool_authority);
    ;; save token_mint and currency_mint
    settingBuilder.store_ref(
        begin_cell()
            .store_msg_addr(token_mint)
            .store_msg_addr(currency_mint)
            .end_cell()
    );

    ;; save token_vault and currency_vault
    settingBuilder.store_ref(
        begin_cell()
            .store_msg_addr(token_vault)
            .store_msg_addr(currency_vault)
            .end_cell()
    );

    ;; others
    settingBuilder.store_uint(start_time, 64);
    settingBuilder.store_uint(end_time, 64);
    settingBuilder.store_uint(public_sale_start_time, 64);
    settingBuilder.store_uint(min_contribution, 64);
    settingBuilder.store_uint(max_contribution, 64);
    settingBuilder.store_uint(soft_cap, 64);
    settingBuilder.store_uint(hard_cap, 64);
    settingBuilder.store_uint(rate, 64);
    settingBuilder.store_uint(listing_percentage, 8);
    settingBuilder.store_uint(refund_type, 8);
    settingBuilder.store_uint(native_fee_percent, 8);
    settingBuilder.store_uint(token_fee_percent, 8);

    return b.store_ref(settingBuilder.end_cell());
}

(slice, ([int, int, int, int, int, int])) ~load_pool_state(slice s) inline {
    slice ds = s~load_ref().begin_parse();

    state = ds~load_uint(8);
    total_raised = ds~load_uint(64);
    total_volume_purchased = ds~load_uint(64);
    purchaser_count = ds~load_uint(64);
    finish_time = ds~load_uint(64);
    claim_time = ds~load_uint(64);

    var data = [state, total_raised, total_volume_purchased, purchaser_count, finish_time, claim_time];
    return (s, (data));
}

builder store_state(builder b, [int, int, int, int, int, int] state_data) inline {
    var [state, total_raised, total_volume_purchased, purchaser_count, finish_time, claim_time] = state_data;

    cell stateBuilder = begin_cell();

    stateBuilder.store_uint(state, 8);
    stateBuilder.store_uint(total_raised, 64);
    stateBuilder.store_uint(total_volume_purchased, 64);
    stateBuilder.store_uint(purchaser_count, 64);
    stateBuilder.store_uint(finish_time, 64);
    stateBuilder.store_uint(claim_time, 64);

    return b.store_ref(stateBuilder.end_cell());
}

(slice, ()) ~load_codes(slice s) impure inline {
    slice ds = s~load_ref().begin_parse();
    jetton_wallet_code = ds~load_ref();
    return (s, ());
}

builder save_codes(builder pb) inline {
    cell codes = begin_cell()
                 .store_ref(jetton_wallet_code)
                 .end_cell();
    return pb.store_ref(codes);
}

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    index = ds~load_uint(32);
    version = ds~load_uint(8);
    
     (
        pool_authority, token_mint, currency_mint, token_vault,
        currency_vault, start_time, end_time, public_sale_start_time, 
        min_contribution, max_contribution, soft_cap, hard_cap, rate, 
        listing_percentage, refund_type, native_fee_percent, token_fee_percent
    ) = ds~load_pool_setting();

    (
        state, total_raised, total_volume_purchased, purchaser_count, finish_time, claim_time
    ) = ds~load_pool_state();

    ds~load_master_config();

    jetton_minter = ds~load_msg_addr();
    jetton_wallet = ds~load_msg_addr();
    ds~load_codes();

    ;;     pub master_config: Pubkey,       // 32
    ;;     pub global_states: Pubkey,       // 32
    ;;     pub whitelist_config: Pubkey,    // 32

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(index, 32)
            .store_uint(version, 32)
            .store_setting(
                [
                    pool_authority, token_mint, currency_mint, token_vault, 
                    currency_vault, start_time, end_time, public_sale_start_time,
                    min_contribution, max_contribution, soft_cap, hard_cap, rate,
                    listing_percentage, refund_type, native_fee_percent, token_fee_percent
                ]
            )
            .store_state(
                [state, total_raised, total_volume_purchased, purchaser_count, finish_time, claim_time]
            )
            .store_master_config()
            .store_slice(jetton_minter)
            .store_slice(jetton_wallet)
            .save_codes()
            .end_cell()
    );
}