#include "../imports/stdlib.fc";

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global int ctx_counter;
global slice jetton_minter;
global slice jetton_wallet;
global cell jetton_wallet_code;

(slice, ([slice, int, int, int, int, cell, cell])) ~load_master_config(slice s) inline {
    slice ds = s~load_ref().begin_parse();
    var data = [
        ds~load_msg_addr(),         ;; fee_receiver
        ds~load_uint(64),           ;; creation_fee
        ds~load_uint(8),            ;; native_fee_percent
        ds~load_uint(8),            ;; token_fee_percent
        ds~load_uint(8),            ;; native_fee_only_percent
        ds~load_dict(),             ;; operators
        ds~load_dict()              ;; currencies
    ];
    return (s, (data));
}

builder store_master_config(builder b, [slice, int, int, int, int, cell, cell] config_data) inline {
    var [fee_receiver, creation_fee, native_fee_percent, token_fee_percent, native_fee_only_percent, operators, currencies] = config_data;
    cell configCell = begin_cell()
                     .store_slice(fee_receiver)
                     .store_uint(creation_fee, 64)
                     .store_uint(native_fee_percent, 8)
                     .store_uint(token_fee_percent, 8)
                     .store_uint(native_fee_only_percent, 8)
                     .store_dict(operators)
                     .store_dict(currencies)
                     .end_cell();
    return b.store_ref(configCell);
}

(slice, ()) ~load_codes(slice s) impure inline {
    slice ds = s~load_ref().begin_parse();
    jetton_wallet_code = ds~load_ref();
    return (s, ());
}

builder save_codes(builder pb) inline {
    cell codes = begin_cell()
                 .store_ref(jetton_wallet_code)
                 .end_cell();
    return pb.store_ref(codes);
}

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_id = ds~load_uint(32);
    ctx_counter = ds~load_uint(32);
    jetton_minter = ds~load_msg_addr();
    jetton_wallet = ds~load_msg_addr();
    ds~load_codes();
    ds~load_master_config();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_uint(ctx_counter, 32)
            .store_slice(jetton_minter)
            .store_slice(jetton_wallet)
            .save_codes()
            .store_master_config()
            .end_cell()
    );
}