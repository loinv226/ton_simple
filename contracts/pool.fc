#include "imports/stdlib.fc";
#include "imports/types.fc";
#include "imports/util.fc";
#include "imports/messages.fc";
#include "imports/address.fc";
#include "pool/storage.fc";
#include "pool/op.fc";
#include "pool/errors.fc";
#include "pool/util.fc";
#include "pool/type.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; bounced messages
        return ();
    }

    load_data(); ;; populate the storage variables
    ;; return ();

    slice sender_address = cs~load_msg_addr();
    force_chain(sender_address);
    
    int op = in_msg_body~load_uint(32); 
    int query_id = in_msg_body~load_uint(64);

    if (op == op::init_pool) { 
        (int amount0, slice owner_addr, cell params) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body~load_ref());

        slice params_cs = params.begin_parse();

        ;; index = 0;
        ;; token_mint = params~load_slice(); not need
        ;; currency_mint = params~load_slice(); not need

        authority = owner_addr;
        start_time = params_cs~load_uint(64);
        end_time = params_cs~load_uint(64);
        public_sale_start_time = params_cs~load_uint(64);
        min_contribution = params_cs~load_coins();
        max_contribution = params_cs~load_coins();
        soft_cap = params_cs~load_coins();
        hard_cap = params_cs~load_coins();
        rate = params_cs~load_uint(32);
        listing_percentage = params_cs~load_uint(8);
        refund_type = params_cs~load_uint(8);
        params_cs~load_uint(1); ;;use_native_fee_only

        ;; native_fee_percent = params_cs~load_uint();
        ;; token_fee_percent = params_cs~load_uint();

        save_data();

        return ();
    }

    if (op == op::contribute) { 
        (int amount, slice owner, int index) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body~load_uint(64));
        ;; verify whitelist owner with tier
        cell proof_cell = in_msg_body~load_ref();

        (slice whitelist_cs, int exotic?) = proof_cell.begin_parse_exotic();
        throw_unless(42, exotic?);
        throw_unless(43, whitelist_cs~load_uint(8) == 3);
        throw_unless(INVALID_WHITELIST, merkle_root == whitelist_cs~load_uint(256));

        cell dict = whitelist_cs~load_ref();
        (slice entry, int found?) = dict.udict_get?(256, index);
        throw_unless(45, found?);

        (slice user, int tier, int start_time, int duration) = (entry~load_msg_addr(), entry~load_uint(8), entry~load_uint(64), entry~load_uint(32));

        if(~ equal_slices(user, owner)) {
            ;; refund currency
            builder msg_body = begin_cell()
                    .store_uint(op::pay_to, 32)
                    .store_uint(query_id, 64)
                    .store_coins(0) ;; token
                    .store_coins(amount)
                    .store_slice(owner)
                    .store_slice(token_vault)
                    .store_slice(currency_vault);

            send_msg(router_address, 0, msg_body.end_cell(), msgflag::BOUNCEABLE, sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);

            return ();
        }

        ;; save state
        int purchase_amount = amount; ;;amount * rate;

        total_raised += amount;
        total_volume_purchased += amount;
        
        save_data();

        ;; send msg to contributor
        (cell state_init, slice contributor) = get_contributor_state_init_and_address(owner, my_address());
            
        builder msg_body = begin_cell()
                    .store_uint(op::contribute, 32)
                    .store_uint(query_id, 64)
                    .store_coins(amount)
                    .store_slice(owner)
                    .store_coins(purchase_amount);

        send_msg_with_state_init(contributor, 0, state_init, msg_body.end_cell(), msgflag::BOUNCEABLE, sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);

        return ();
    }

    if (op == op::finalize) {
        throw_unless(INVALID_SENDER, equal_slices(sender_address, authority));
        throw_unless(INVALID_STATE, state == POOL_STATE_ACTIVE);

        state = POOL_STATE_FINALIZED;
        finish_time = now();

        save_data();

        ;; send msg claim currency
        builder msg_body = begin_cell()
                    .store_uint(op::pay_to, 32)
                    .store_uint(query_id, 64)
                    .store_coins(0) ;; token
                    .store_coins(total_raised)
                    .store_slice(sender_address)
                    .store_slice(token_vault)
                    .store_slice(currency_vault);

        send_msg(router_address, 0, msg_body.end_cell(), msgflag::BOUNCEABLE, sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);

        return ();
    }

    if (op == op::claim) { 
        (int p_amount, slice owner) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        (_, slice contributor) = get_contributor_state_init_and_address(owner, my_address());
        throw_unless(INVALID_SENDER, equal_slices(sender_address, contributor));

        save_data();

        ;; send msg claim token
        builder msg_body = begin_cell()
                    .store_uint(op::pay_to, 32)
                    .store_uint(query_id, 64)
                    .store_coins(p_amount)
                    .store_coins(0) ;; currency
                    .store_slice(owner)
                    .store_slice(token_vault)
                    .store_slice(currency_vault);

        send_msg(router_address, 0, msg_body.end_cell(), msgflag::BOUNCEABLE, sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);

        return ();
    }

    if (op == op::update_pool) { 
        throw_unless(INVALID_SENDER, equal_slices(sender_address, authority));

        int merkle_flag = in_msg_body~load_uint(1);
        if(merkle_flag) {
            merkle_root = in_msg_body~load_uint(256);
        }
        
        save_data();

        return ();
    }

    throw(WRONG_OP);
}

;; get methods
slice get_contributor_address(slice owner) method_id {
    load_data();
    (_, slice contributor) = get_contributor_state_init_and_address(owner, my_address());
    return contributor;
}

(int, int, int, int, int, int, slice, int) get_pool_info() method_id { 
    load_data();

    return (state, total_raised, total_volume_purchased, purchaser_count, finish_time, claim_time, authority, merkle_root);
}
