#include "../imports/stdlib.fc";

;; storage variables
global int index;
global int version;
global slice router_address;

;; settings
global slice authority;
global slice token_mint;
global slice currency_mint;
global slice token_vault;
global slice currency_vault;
global int start_time;
global int end_time;
global int public_sale_start_time;
global int min_contribution;
global int max_contribution;
global int soft_cap;
global int hard_cap;
global int rate;
global int listing_percentage;
global int refund_type;
global int native_fee_percent;
global int token_fee_percent;

;; state
global int state;
global int total_raised;
global int total_volume_purchased;
global int purchaser_count;
global int finish_time;
global int claim_time;

;; jetton
;; global slice jetton_minter;
;; global slice jetton_wallet;
global cell contributor_code;

(slice, ()) ~load_pool_setting(slice s) inline {
    slice ds = s~load_ref().begin_parse();

    authority = ds~load_msg_addr();

    slice jetton_s = ds~load_ref().begin_parse();
    token_mint = jetton_s~load_msg_addr();
    currency_mint = jetton_s~load_msg_addr();

    slice vault_s = ds~load_ref().begin_parse();
    token_vault = vault_s~load_msg_addr();
    currency_vault = vault_s~load_msg_addr();

    start_time = ds~load_uint(64);
    end_time = ds~load_uint(64);
    public_sale_start_time = ds~load_uint(64);
    min_contribution = ds~load_coins();
    max_contribution = ds~load_coins();
    soft_cap = ds~load_coins();
    hard_cap = ds~load_coins();
    rate = ds~load_uint(32);
    listing_percentage = ds~load_uint(8);
    refund_type = ds~load_uint(8);
    native_fee_percent = ds~load_uint(8);
    token_fee_percent = ds~load_uint(8);
    
    return (s, ());
}

builder store_setting(builder b) inline {
    var settingBuilder = begin_cell()
    .store_slice(authority);; save authority
    .store_ref(
        begin_cell()
            .store_slice(token_mint)
            .store_slice(currency_mint)
            .end_cell()
    );; save token_mint and currency_mint
    .store_ref(
        begin_cell()
            .store_slice(token_vault)
            .store_slice(currency_vault)
            .end_cell()
    );; save token_vault and currency_vault
    .store_uint(start_time, 64)
    .store_uint(end_time, 64)
    .store_uint(public_sale_start_time, 64)
    .store_coins(min_contribution)
    .store_coins(max_contribution)
    .store_coins(soft_cap)
    .store_coins(hard_cap)
    .store_uint(rate, 32)
    .store_uint(listing_percentage, 8)
    .store_uint(refund_type, 8)
    .store_uint(native_fee_percent, 8)
    .store_uint(token_fee_percent, 8);

    return b.store_ref(settingBuilder.end_cell());
}

(slice, ([int, int, int, int, int, int])) ~load_pool_state(slice s) inline {
    slice ds = s~load_ref().begin_parse();

    state = ds~load_uint(8);
    total_raised = ds~load_coins();
    total_volume_purchased = ds~load_coins();
    purchaser_count = ds~load_uint(32);
    finish_time = ds~load_uint(64);
    claim_time = ds~load_uint(64);

    var data = [state, total_raised, total_volume_purchased, purchaser_count, finish_time, claim_time];
    return (s, (data));
}

builder store_state(builder b) inline {
    var stateBuilder = begin_cell()
    .store_uint(state, 8)
    .store_coins(total_raised)
    .store_coins(total_volume_purchased)
    .store_uint(purchaser_count, 32)
    .store_uint(finish_time, 64)
    .store_uint(claim_time, 64);

    return b.store_ref(stateBuilder.end_cell());
}

(slice, ()) ~load_codes(slice s) impure inline {
    slice ds = s~load_ref().begin_parse();
    contributor_code = ds~load_ref();
    return (s, ());
}

builder save_codes(builder pb) inline {
    cell codes = begin_cell()
                 .store_ref(contributor_code)
                 .end_cell();
    return pb.store_ref(codes);
}

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    index = ds~load_uint(32);
    version = ds~load_uint(8);
    router_address = ds~load_msg_addr();
    
    ds~load_pool_setting();
    ds~load_pool_state();
    ds~load_codes();
    
    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(index, 32)
            .store_uint(version, 8)
            .store_slice(router_address)
            .store_setting()
            .store_state()
            .save_codes()
            .end_cell()
    );
}