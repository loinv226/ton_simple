#include "imports/stdlib.fc";
#include "imports/types.fc";
#include "imports/messages.fc";
#include "imports/address_calculations.fc";
#include "jetton/op-codes.fc";
#include "jetton/params.fc";
#include "jetton/jetton-utils.fc";
#include "imports/op-codes.fc";

const int JETTONS_WORKCHAIN = 0;

() transfer_jettons(slice sender, slice _jetton_wallet, int jetton_amount, int amount, int query_id) impure inline {
    slice jetton_wallet = calculate_user_jetton_wallet_address(my_address(), jetton_minter, jetton_wallet_code);
    int op::transfer = 0xf8a7ea5;

    var msg = begin_cell()
            .store_msg_flags(msgflag::BOUNCEABLE)
            .store_slice(jetton_wallet)
            .store_coins(amount)
            .store_msgbody_prefix_ref(
        begin_cell()
              .store_op(op::transfer)
              .store_query_id(query_id)
              .store_coins(jetton_amount)
              .store_slice(sender)
              .store_slice(sender)
              .store_maybe_ref(null()) ;; custom_payload
              .store_coins(0)
              .store_int(false, 1)
              .end_cell()
    );

    send_raw_message(msg.end_cell(), sendmode::REGULAR);
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    load_data(); ;; here we populate the storage variables


    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::increase) {
        ;; send 1 token to the sender
        transfer_jettons(sender_address, jetton_wallet, 1000000000, 50000000, query_id);

        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

slice get_jetton() method_id {
    load_data();
    return jetton_wallet;
}
