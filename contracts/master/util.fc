builder store_setting(builder b, slice token_vault, slice currency_vault) inline {
    
    var settingBuilder = begin_cell();

    ;; save pool_authority
    settingBuilder.store_slice(addr_none());
    ;; save token_mint and currency_mint
    settingBuilder.store_ref(
        begin_cell()
            .store_slice(addr_none())
            .store_slice(addr_none())
            .end_cell()
    );

    ;; save token_vault and currency_vault
    settingBuilder.store_ref(
        begin_cell()
            .store_slice(token_vault)
            .store_slice(currency_vault)
            .end_cell()
    );

    ;; others
    settingBuilder.store_uint(0, 64); ;; start_time
    settingBuilder.store_uint(0, 64); ;; end_time
    settingBuilder.store_uint(0, 64); ;; public_sale_start_time
    settingBuilder.store_coins(0); ;; min_contribution
    settingBuilder.store_coins(0); ;; max_contribution
    settingBuilder.store_coins(0); ;; soft_cap
    settingBuilder.store_coins(0); ;; hard_cap
    settingBuilder.store_uint(0, 32); ;; rate
    settingBuilder.store_uint(0, 8); ;; listing_percentage
    settingBuilder.store_uint(0, 8); ;; refund_type
    settingBuilder.store_uint(0, 8); ;; native_fee_percent
    settingBuilder.store_uint(0, 8); ;; token_fee_percent

    return b.store_ref(settingBuilder.end_cell());
}

builder store_state(builder b) inline {
    var stateBuilder = begin_cell();

    stateBuilder.store_uint(0, 8); ;; state
    stateBuilder.store_coins(0); ;; total_raised
    stateBuilder.store_coins(0); ;; total_volume_purchased
    stateBuilder.store_uint(0, 32); ;; purchaser_count
    stateBuilder.store_uint(0, 64); ;; finish_time
    stateBuilder.store_uint(0, 64); ;; claim_time

    return b.store_ref(stateBuilder.end_cell());
}

cell pack_pool_data(slice token_vault, slice currency_vault) inline_ref {
    return begin_cell()
            .store_uint(0, 32) ;; index
            .store_uint(0, 32) ;; version
            .store_setting(token_vault, currency_vault)
            .store_state()
            .store_slice(my_address())
            .end_cell();
}

(cell, slice) get_pool_state_init_and_address(slice token_vault, slice currency_vault) inline {
    cell state_init = begin_cell()
        .store_uint(0, 1 + 1)
        .store_maybe_ref(pool_code)
        .store_maybe_ref(pack_pool_data(token_vault, currency_vault))
        .store_uint(0, 1)
        .end_cell();
    
    return (state_init, calc_address(WORKCHAIN, state_init));
}

(int) validate_pool_data() {
    return true;
}