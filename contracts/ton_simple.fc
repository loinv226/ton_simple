#include "imports/stdlib.fc";
#include "imports/types.fc";
#include "imports/messages.fc";
#include "imports/address_calculations.fc";
#include "jetton/op-codes.fc";
#include "jetton/params.fc";
#include "jetton/jetton-utils.fc";
#include "imports/op-codes.fc";

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int ctx_id;
global int ctx_counter;
global slice jetton_minter;
global slice jetton_wallet;
global cell jetton_wallet_code;

const int JETTONS_WORKCHAIN = 0;


(slice, ()) ~load_codes(slice s) impure inline {
    slice ds = s~load_ref().begin_parse();
    jetton_wallet_code = ds~load_ref();
    return (s, ());
}

builder save_codes(builder pb) inline {
    cell codes = begin_cell()
                 .store_ref(jetton_wallet_code)
                 .end_cell();
    return pb.store_ref(codes);
}

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_id = ds~load_uint(32);
    ctx_counter = ds~load_uint(32);
    jetton_minter = ds~load_msg_addr();
    jetton_wallet = ds~load_msg_addr();
    ds~load_codes();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_id, 32)
            .store_uint(ctx_counter, 32)
            .store_slice(jetton_minter)
            .store_slice(jetton_wallet)
            .save_codes()
            .end_cell()
    );
}


() transfer_jettons(slice sender, int jetton_amount, int amount, int query_id) impure inline {
    jetton_wallet = calculate_user_jetton_wallet_address(my_address(), jetton_minter, jetton_wallet_code);
    slice sender_wallet = calculate_user_jetton_wallet_address(sender, jetton_minter, jetton_wallet_code);
    int op::transfer = 0xf8a7ea5;

    var msg = begin_cell()
            .store_msg_flags(msgflag::BOUNCEABLE)
            .store_slice(jetton_wallet)
            .store_coins(amount)
            .store_msgbody_prefix_ref(
        begin_cell()
              .store_op(op::transfer)
              .store_query_id(query_id)
              .store_coins(jetton_amount)
              .store_slice(sender_wallet)
              .store_slice(sender_wallet)
              .store_maybe_ref(null()) ;; custom_payload
              .store_coins(0)
              .store_int(false, 1)
              .end_cell()
    );

    send_raw_message(msg.end_cell(), sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();

    load_data(); ;; here we populate the storage variables


    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::increase) {
        int increase_by = in_msg_body~load_uint(32);
        ctx_counter += increase_by;
        ;; send 1 token to the sender
        transfer_jettons(sender_address, 1000000000, 0, query_id);

        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

() init_jetton_wallet_if_need(slice jetton_minter) impure inline {
    if(jetton_wallet.null?()) {
        ;; we need to deploy new minter
        cell state_init = calculate_jetton_wallet_state_init(my_address(), jetton_minter, jetton_wallet_code);
        jetton_wallet = calculate_user_jetton_wallet_address(my_address(), jetton_minter, jetton_wallet_code);
        
        builder msg = begin_cell()
                .store_msg_flags(msgflag::BOUNCEABLE)
                .store_slice(jetton_wallet)
                .store_coins(0)
                .store_msgbody_prefix_stateinit_slice(state_init);
        ;; .store_body_header(init, cur_lt());
                
        send_raw_message(msg.end_cell(), sendmode::REGULAR);
    }
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

int get_counter() method_id {
    load_data();
    return ctx_counter;
}

int get_id() method_id {
    load_data();
    return ctx_id;
}

slice get_jetton() method_id {
    load_data();
    return jetton_wallet;
}
