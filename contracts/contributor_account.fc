#include "imports/stdlib.fc";
#include "imports/types.fc";
#include "imports/messages.fc";
#include "imports/address.fc";
#include "imports/util.fc";
#include "contributor/storage.fc";
#include "contributor/op.fc";
#include "contributor/errors.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; bounced messages
        return ();
    }
    
    load_data(); ;; populate the storage variables

    slice sender_address = cs~load_msg_addr();
    force_chain(sender_address);
     
    int op = in_msg_body~load_uint(32); 
    int query_id = in_msg_body~load_uint(64);

    if (op == op::contribute) { 
        
        (int c_amount, slice owner, int p_amount) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body~load_coins());
        
        int is_new_purchaser = purchased_amount == 0;
        
        contribute_amount += c_amount;
        purchased_amount += p_amount;

        save_data();

        return ();
    }

    if (op == op::claim) { 
        
        throw_unless(INVALID_SENDER, equal_slices(sender_address, user_address));
        throw_unless(INVALID_STATE, purchased_amount > 0);
        throw_unless(INVALID_STATE, claimed_amount == 0);

        claimed_amount = purchased_amount; 

        save_data();

        builder msg_body = begin_cell()
                    .store_uint(op::claim, 32)
                    .store_uint(query_id, 64)
                    .store_coins(purchased_amount)
                    .store_slice(sender_address);

        send_msg(pool_address, 0, msg_body.end_cell(), msgflag::BOUNCEABLE, sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);
            
        return ();
    }

    if (op == op::emergency_withdraw) { 
        
        throw_unless(INVALID_SENDER, equal_slices(sender_address, user_address));
        throw_unless(INVALID_STATE, purchased_amount > 0);
        throw_unless(INVALID_STATE, claimed_amount == 0);

        claimed_amount = purchased_amount; 

        save_data();

        builder msg_body = begin_cell()
                    .store_uint(op::emergency_withdraw, 32)
                    .store_uint(query_id, 64)
                    .store_coins(contribute_amount * 90 / 100)
                    .store_slice(sender_address);

        send_msg(pool_address, 0, msg_body.end_cell(), msgflag::BOUNCEABLE, sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);
            
        return ();
    }
    

    throw(WRONG_OP);
}

;; Getter methods
int get_contribute_amount() method_id {
    load_data();
    return contribute_amount;
}

int get_purchased_amount() method_id {
    load_data();
    return purchased_amount;
}

int get_claimed_amount() method_id {
    load_data();
    return claimed_amount;
}